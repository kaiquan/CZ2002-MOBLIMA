package dao_module;

import java.util.ArrayList;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import model.AGELIMIT;
import model.MOVIESTATUS;
import model.MOVIETYPE;
import model.Movie;
import model.Review;

public class MovieDAO extends JSONDAO{
	private JSONObject jsonObject = null;
	private ArrayList<Movie> movies = null;
	
	public MovieDAO(){
		this.jsonObject = readFile(JSONDAO.moviePath);
		parseJSON(this.jsonObject);
	}
	
	//@purpose	: create a movie listing with reviews
	//@param	: required
	//@return	: void
	@SuppressWarnings("unchecked")
	public void createNewMovie(Movie movie){
		JSONArray jsonMovies = (JSONArray) jsonObject.get("movies");
		JSONObject jsonMovie = new JSONObject();
		
		jsonMovie.put("id", movie.getId());
		jsonMovie.put("title", movie.getTitle());
		
		
		//loop to put the cast
		JSONArray jsonCasts = new JSONArray();
		JSONObject jsonCast = new JSONObject();
		for(int i=0;i<movie.getCasts().size();i++){
			jsonCast.put("actor", movie.getCasts().get(i));
			jsonCasts.add(jsonCast);
		}
		jsonMovie.put("casts", jsonCasts);
		jsonMovie.put("reviews", new JSONArray());
		
		jsonMovies.add(jsonMovie);
		updateFile(JSONDAO.moviePath,this.jsonObject);
	}
	
	//@purpose	: update the movie listing with reviews
	//@param	: required
	//@return	: void
	@SuppressWarnings("unchecked")
	public void updateMovie(Movie movie){
//		JSONArray jsonMovies = (JSONArray) jsonObject.get("movies");
//		JSONObject jsonMovie = new JSONObject();
//		
//		jsonMovie.put("id", movie.getId());
//		
//		
//		//loop to put the cast
//		JSONArray jsonCasts = new JSONArray();
//		JSONObject jsonCast = new JSONObject();
//		for(int i=0;i<movie.getCasts().size();i++){
//			jsonCast.put("actor", movie.getCasts().get(i));
//			jsonCasts.add(jsonCast);
//		}
//		jsonMovie.put("casts", jsonCasts);
//		jsonMovie.put("reviews", new JSONArray());
//		
//		jsonMovies.add(jsonMovie);
//		updateFile(JSONDAO.moviePath,this.jsonObject);
	}
	
	//@purpose	: retrieve the movie listing with reviews
	//@param	: required
	//@return	: arraylist of movies
	@SuppressWarnings("null")
	public ArrayList<Movie> getAllMovieswithReviews(boolean include_END_OF_SHOWING){
		ArrayList<Movie> results = null;
		
		if(this.movies!=null&&this.movies.size()>0){
			for(int i = 0;i<this.movies.size();i++){
				if(include_END_OF_SHOWING){
					results.add(this.movies.get(i));
				}
				else{
					if(this.movies.get(i).getMovieStatus()!=MOVIESTATUS.END_OF_SHOWING){
						results.add(this.movies.get(i));
					}
				}
			}
		}
		return results;
	}
	
	//@purpose	: retrieve the movie listing with reviews by cineplex
	//@param	: required
	//@return	: arraylist of movies
	public ArrayList<Movie> getAllMoviesWithReviewsByCineplex(String cineplexName, boolean include_END_OF_SHOWING){
		ArrayList<Movie> results = null;
		
		if(this.movies!=null&&this.movies.size()>0){
			for(int i=0;i<this.movies.size();i++){
				if(this.movies.get(i).getCineplexName().equals(cineplexName)){
					if(results==null)
						results = new ArrayList<Movie>();
					
					if(include_END_OF_SHOWING){
						results.add(this.movies.get(i));
					}
					else{
						if(this.movies.get(i).getMovieStatus()!=MOVIESTATUS.END_OF_SHOWING){
							results.add(this.movies.get(i));
						}
					}
				}
			}
		}
			
		return results;
	}
	
	public Movie getMovieByid(String id){
		Movie result= null;
		return result;
	}
	
	
	private void parseJSON(JSONObject jsonObject){
		if(this.jsonObject != null){
			JSONArray jsonMovies = (JSONArray) jsonObject.get("movies");
			JSONObject jsonMovie;
			Movie movie;
			for(int i=0;i<jsonMovies.size();i++){
				jsonMovie = (JSONObject)jsonMovies.get(i);
				movie = new Movie();
				movie.setId(jsonMovie.get("id").toString());
				movie.setTitle(jsonMovie.get("title").toString());
				movie.setMovieType(MOVIETYPE.valueOf(jsonMovie.get("movietype").toString()));
				movie.setMovieStatus(MOVIESTATUS.valueOf(jsonMovie.get("moviestatus").toString()));
				movie.setCineplexName(jsonMovie.get("cineplexname").toString());
				movie.setSynopsis(jsonMovie.get("synopsis").toString());
				movie.setDirector(jsonMovie.get("director").toString());
				movie.setShowDuration(Integer.parseInt(jsonMovie.get("showduration").toString()));
				movie.setAgeLimit(AGELIMIT.valueOf(jsonMovie.get("agelimit").toString()));
				
				//loop to get the casts
				JSONArray jsonCasts = (JSONArray) jsonMovie.get("casts");
				JSONObject jsonCast;
				ArrayList<String> casts=null;
				for(int x=0;x<jsonCasts.size();x++){
					jsonCast = (JSONObject)jsonCasts.get(x);
					
					if(casts==null)
						casts= new ArrayList<String>();
					casts.add(jsonCast.get("actor").toString());
				}
				movie.setCasts(casts);
				
				//loop to get the reviews
				JSONArray jsonReviews = (JSONArray) jsonMovie.get("reviews");
				JSONObject jsonReview;
				ArrayList<Review> reviews=null;
				for(int y=0;y<jsonReviews.size();y++){
					jsonReview = (JSONObject)jsonReviews.get(y);
					Review review = new Review();
					review.setGuestId(jsonReview.get("guestid").toString());
					review.setGuestName(jsonReview.get("guestname").toString());
					review.setRating(Integer.parseInt(jsonReview.get("rating").toString()));
					review.setReview(jsonReview.get("review").toString());
					
					if(reviews==null)
						reviews= new ArrayList<Review>();
					review.setMovie(movie);
					reviews.add(review);

				}
				movie.setReviews(reviews);
//				movie.setCineplex(new CineplexDAO().getCineplexByName(movie.getCineplexName()));
				
				if(this.movies==null)
					this.movies = new ArrayList<Movie>();
				this.movies.add(movie);
			}
		}
	}
}
